const isEmpty = require( 'lodash/isEmpty' );
const sortable = require( '../models/movie' ).sortableFields;
const searchable = require( '../models/movie' ).searchableField;
const permitedParams = require( '../models/movie' ).permitedFields;
const escape = require( 'validator/lib/escape' );
const toDate = require( 'validator/lib/toDate' );
const pick = require( 'lodash/pick' );
const Op = require( 'sequelize' ).Op;

/** @description Transforms and prepare a query options object 
 * @param {Object} [queryObj] - queryObjs
 * @param {number} [queryObj.limit] - number of result to show, should be > 0. 
 * @param {number} [queryObj.skip] - number of result to skip over, should be > 0.
 * @param {string} [queryObj.sortBy] - name of the field to sort results.
 * @param {'ASC'|'DESC'} [queryObj.order] - sort direction.
 * @param {string} [query.search.term] - Term to search in movies
 * @param {string} [query.search.field] - Field name which should be searched by
 * @return {object} queryObj ready for a ORM query
 */
module.exports.queryOptions = ( queryObj = {}) => {
  let query = { offset: 0, limit: 10, order: [[ 'id' ]]};
  let field, direction = 'ASC';
  const { limit, skip, sortBy, order, search } = queryObj;

  if( isEmpty( queryObj )) return query;

  if( limit && limit > 0 ) query.limit = parseInt( limit );

  if( skip && skip >= 0 ) query.offset = parseInt( skip );
 
  field = sortBy && sortable.some( field => field === sortBy ) ? sortBy: 'id';

  if( order && order.toUpperCase() === 'DESC' ) direction = 'DESC';

  query.order = [[ field, direction ]];

  if( !search || !search.term ) return query;

  let searchField = 
    search.field && searchable.some( fld => fld === search.field.toLowerCase()) 
      ? search.field.toLowerCase()
      : 'title';

  query.where = { 
    [ searchField ]: {
      [ Op.iLike ]: `%${search.term}%`
    }
  };

  return query;
};

/**
 * @description - Filter the received json to only allow the permited params 
 * through the create / update
 * @param {object} params - request params
 */
module.exports.permitedParams = ( params ) => {
  let permited = pick( params, permitedParams );

  Object.keys( permited ).forEach( param => {
    if( param === 'releaseDate' ){
      permited[ param ] = toDate( permited[ param ]);
      return;
    }
    permited[ param ] = escape( permited[ param ] + '' );
  });

  return permited;
};
/**
 * @description Extract validations error and organize them to send them as reply
 * @param {object} errors - list of validation errors generated by a sequelize 
 * action
 * @returns {object} - Object with all validations errors
 */
module.exports.prepareErrorMsgs = ( errors ) => {
  let errorsMsgs = {};

  errors.forEach( error => {
    errorsMsgs[ error.path ] = error.message;
  });

  return { errors: errorsMsgs };
};